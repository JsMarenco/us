generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Layout {
  DEFAULT
  BRUTALISM
}

enum PlanPriority {
  HIGH
  MEDIUM
  LOW
}

enum PlanStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username       String  @unique
  email          String  @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  avatarSrc      String? @default("")

  bio String? @default("")

  resetTokenHash      String?   @default("")
  resetTokenCreatedAt DateTime?
  resetTokenExpiresAt DateTime?
  resetRequestCount   Int       @default(0)
  resetRequestDate    DateTime?

  lastPasswordResetAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileLayout Layout @default(DEFAULT)

  createdDeYoPaTus DeYoPaTu[] @relation("CreatedDeYoPaTus")

  FuturePlan FuturePlan[] @relation("ProposedPlans")
  Session    Session[]
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  tokenHash  String
  expiresAt  DateTime
  lastUsedAt DateTime?

  deviceName String?
  deviceInfo String?
  ipAddress  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tokenHash])
  @@index([userId])
}

model AvatarPair {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  imageSrcOne String
  imageSrcTwo String

  takenAt DateTime
  caption String?  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeYoPaTu {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  creatorId String @db.ObjectId

  title                String?  @default("")
  spotifyEmbedTrackSrc String?  @default("")
  content              String
  writtenAt            DateTime
  thumbnailSrc         String?  @default("")

  creator User @relation("CreatedDeYoPaTus", fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FuturePlan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title        String
  description  String?
  status       PlanStatus   @default(PENDING)
  priority     PlanPriority @default(HIGH)
  dueDate      DateTime?
  thumbnailSrc String?      @default("")

  proposerId String @db.ObjectId
  proposer   User   @relation("ProposedPlans", fields: [proposerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteConfig {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  key String? @unique

  showRegisterPage Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
